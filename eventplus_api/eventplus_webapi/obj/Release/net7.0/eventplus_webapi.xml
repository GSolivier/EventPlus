<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eventplus_webapi</name>
    </assembly>
    <members>
        <member name="T:eventplus_webapi.Contexts.EventContext">
            <summary>
            contexto que acessa o banco de dados
            </summary>
        </member>
        <member name="P:eventplus_webapi.Contexts.EventContext.TiposUsuario">
            <summary>
            Referencia a tabela TiposUsuario no banco de dados
            </summary>
        </member>
        <member name="P:eventplus_webapi.Contexts.EventContext.Usuario">
            <summary>
            Referencia a tabela Usuario no banco de dados
            </summary>
        </member>
        <member name="P:eventplus_webapi.Contexts.EventContext.TiposEvento">
            <summary>
            Referencia a tabela TiposEvento no banco de dados
            </summary>
        </member>
        <member name="P:eventplus_webapi.Contexts.EventContext.Evento">
            <summary>
            Referencia a tabela Evento no banco de dados
            </summary>
        </member>
        <member name="P:eventplus_webapi.Contexts.EventContext.ComentarioEvento">
            <summary>
            Referencia a tabela ComentarioEvento no banco de dados
            </summary>
        </member>
        <member name="P:eventplus_webapi.Contexts.EventContext.Instituicao">
            <summary>
            Referencia a tabela Instituicao no banco de dados
            </summary>
        </member>
        <member name="P:eventplus_webapi.Contexts.EventContext.PresencasEvento">
            <summary>
            Referencia a tabela PresencaEvento no banco de dados
            </summary>
        </member>
        <member name="M:eventplus_webapi.Contexts.EventContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Configuração da conexão com o banco de dados
            </summary>
            <param name="optionsBuilder">Objeto para acessar a string de conexão</param>
        </member>
        <member name="T:eventplus_webapi.Controllers.ComentarioEventoController">
            <summary>
            Controlador com os Endpoints da entidade ComentarioEvento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.ComentarioEventoController.#ctor">
            <summary>
            Construtor que instancia o objeto do repositório
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.ComentarioEventoController.Post(eventplus_webapi.Domains.ComentarioEvento)">
            <summary>
            Endpoint que acessa o método cadastrar do ComentarioEventoRepository
            </summary>
            <param name="comentarioEvento">Objeto com os atributos a serem cadastrados</param>
            <returns>retorna um status code 200 - OK</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.ComentarioEventoController.GetByIdEvento(System.Guid)">
            <summary>
            Endpoint que acessa o método Listar do ComentarioEventoRepository
            </summary>
            <param name="idEvento">ID do evento que terá seus comentários listados</param>
            <returns>retorna um status code ok -200 com uma lista dos objetos</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.ComentarioEventoController.GetByIdUsuario(System.Guid,System.Guid)">
            <summary>
            Endpoint que acessa o método ListarPorUsuario do repositório ComentarioEventoRepository
            </summary>
            <param name="idUsuario">ID do usuário que terá seus comentários listados</param>
            <returns>retorna um status code Ok - 200 com os objetos listados</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.ComentarioEventoController.GetAll">
            <summary>
            Endpoint que acessa o método ListarTodos do ComentarioEventoRepository
            </summary>
            <returns>Retorna a lista com os objetos</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.ComentarioEventoController.GetById(System.Guid)">
            <summary>
            Endpoint que acessa o método BuscarPorId do ComentarioEventoRepository
            </summary>
            <param name="id">ID do comentário que será buscado</param>
            <returns>retorna um statis code Ok com o objeto encontrado</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.ComentarioEventoController.Delete(System.Guid)">
            <summary>
            Endpoint que acessa o método Deletar do COmentarioEventoRepository
            </summary>
            <param name="id">ID do comentário que será deletado</param>
            <returns>Retorna um status code Ok - 200</returns>
        </member>
        <member name="T:eventplus_webapi.Controllers.EventoController">
            <summary>
            Controlador responsável pelos Endpoits da entidade Evento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.EventoController.#ctor">
            <summary>
            Constutor que instancia o objeto do _eventoRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.EventoController.Post(eventplus_webapi.Domains.Evento)">
            <summary>
            Endpoint que acessa o método Cadastrar na EventoRepository
            </summary>
            <param name="evento">Objeto com os atributos a serem cadastrados</param>
            <returns>retorna um StatusCode OK - 200</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.EventoController.Get">
            <summary>
            Endpoint que acessa o método Listar na EventoRepository
            </summary>
            <returns>Retorna um StatusCode Ok - 200 com a lista de eventos</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.EventoController.GetNext">
            <summary>
            Endpoint que acessa o método ListarProximos do EventoRepository
            </summary>
            <returns>Retorna um StatusCode Ok - 200 com a lista de objetos</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.EventoController.Put(System.Guid,eventplus_webapi.Domains.Evento)">
            <summary>
            Endpoint que acessa o método Atualizar na EventoRepository
            </summary>
            <param name="id">ID do objeto que será atualizado</param>
            <param name="evento">corpo do objeto com as novas informações</param>
            <returns>Retorna um StatusCode Ok - 200</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.EventoController.Delete(System.Guid)">
            <summary>
            Endpoint que acessa o método Deletar do Repository
            </summary>
            <param name="id">ID do usuário que será deletado</param>
            <returns>retorna um status code ok - 200</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.EventoController.GetById(System.Guid)">
            <summary>
            Endpoint que acessa o método BuscarPorId do eventoRepository
            </summary>
            <param name="id">ID do objeto que será buscado</param>
            <returns>Retorna um statusCode Ok - 200</returns>
        </member>
        <member name="T:eventplus_webapi.Controllers.InstituicaoController">
            <summary>
            Controlador que armazena os Endpoints da entidade Instituicao
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.InstituicaoController.#ctor">
            <summary>
            Construtor que implementa o objeto do repositório
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.InstituicaoController.Post(eventplus_webapi.Domains.Instituicao)">
            <summary>
            Endpoint que acessa o método Cadastrar no InstituicaoRepository
            </summary>
            <param name="instituicao">Objeto com os novos valores a serem cadastrados</param>
            <returns>retorna um StatusCode Ok - 200</returns>
        </member>
        <member name="T:eventplus_webapi.Controllers.LoginController">
            <summary>
            Controlador com os métodos necessários para realizar o login
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.LoginController.#ctor">
            <summary>
            Construtor para criar um novo objeto UsuarioRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.LoginController.Login(eventplus_webapi.ViewModels.LoginViewModel)">
            <summary>
            Método para realizar o login de um usuário utilizando o método BuscarPorEmailESenha no UsuarioRepository
            </summary>
            <param name="usuario">Objeto da LoginViewModel para realizar o login do usuário</param>
            <returns>Retorna um StatusCode 200 - Ok</returns>
        </member>
        <member name="T:eventplus_webapi.Controllers.PresencasEventoController">
            <summary>
            Controlador com os endpoints da entidade PresencasEvento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.PresencasEventoController.#ctor">
            <summary>
            Construtor responsável por instanciar um objeto do repository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.PresencasEventoController.Post(eventplus_webapi.Domains.PresencasEvento)">
            <summary>
            Endpoint que acessa o método cadastrar no PresencasEventoRepository
            </summary>
            <param name="presencasEvento">objeto que contem as informações que serão cadastradas</param>
            <returns>Retorna um status code 201 - Created</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.PresencasEventoController.Get">
            <summary>
            Endpoint que acessa o método Listar no PresencasEventoRepository
            </summary>
            <returns>Retorna um StatusCode 200 - OK com a lista de objetos</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.PresencasEventoController.GetByUser(System.Guid)">
            <summary>
            Endpoint que acessa o método ListarPresencasUser do PresencasEventoRepository
            </summary>
            <param name="id">ID do usuário que terá as suas presenças listadas</param>
            <returns>retorna um statuscode OK- 200 com a lista de objetos</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.PresencasEventoController.Put(System.Guid,eventplus_webapi.Domains.PresencasEvento)">
            <summary>
            Endpoint que acessa o método Atualizar do PresencaEventoRepository
            </summary>
            <param name="id">ID da presença que será atualizada</param>
            <param name="presencaEvento">Objeto com os novos valores</param>
            <returns>Retorna um status code 200 - ok</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.PresencasEventoController.Delete(System.Guid)">
            <summary>
            Endpoint que acessa o método Deletar da PresencaEventoRepository
            </summary>
            <param name="id">ID da prensença que será deletada</param>
            <returns>Retorna um status code 200 - ok</returns>
        </member>
        <member name="T:eventplus_webapi.Controllers.TiposEventoController">
            <summary>
            Controlador para armazenar os métodos da entidade TiposEvento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposEventoController.#ctor">
            <summary>
            controlador para instanciar um novo repositório de evento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposEventoController.Post(eventplus_webapi.Domains.TiposEvento)">
            <summary>
            Endpoint para realizar um cadastro de um novo tipo de evento a partir do repository
            </summary>
            <param name="tipoEvento">o objeto com os novos atributos a serem passados pelo usuário</param>
            <returns>retorna um status code(201) - Created </returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposEventoController.Get">
            <summary>
            Endpoint que acessa o método de Listar na TiposEventoRepository
            </summary>
            <returns>Retorna um status code 200 - ok com a lista de objetos</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposEventoController.Put(System.Guid,eventplus_webapi.Domains.TiposEvento)">
            <summary>
            Endpoint que aciona o método Atualizar na tipoEventoRepository
            </summary>
            <param name="id">ID do objeto que será atualizado</param>
            <param name="tipoEvento">corpo do objeto com as novas informações</param>
            <returns>Retorna um status code Ok - 200</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposEventoController.Delete(System.Guid)">
            <summary>
            Endpoint que acessa o método Deletar do TipoEventoRepository
            </summary>
            <param name="id">ID do tipo de evento que será deletado</param>
            <returns>Retorna um status code OK - 200</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposEventoController.GetById(System.Guid)">
            <summary>
            Endpoint que acessa o método BuscarPorId no tiposEventoRepoistory
            </summary>
            <param name="id">ID do objeto que será buscado</param>
            <returns>Retorna um status code Ok com o objeto encontrado</returns>
        </member>
        <member name="T:eventplus_webapi.Controllers.TiposUsuarioController">
            <summary>
            Controlador com os métodos para a entidade TipoUsuario
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposUsuarioController.#ctor">
            <summary>
            Construtor para atribuir um novo objeto 
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposUsuarioController.Post(eventplus_webapi.Domains.TiposUsuario)">
            <summary>
            Endpoint que acessa o tipoUsuarioRepository para realizar um novo cadastro
            </summary>
            <param name="tiposUsuario">Objeto com os valores a serem cadastrados</param>
            <returns>Retorna um StatusCode(200) - Ok</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposUsuarioController.Get">
            <summary>
            Endpoint que acessa o método Listar do tipoUsuarioRepository
            </summary>
            <returns>Retorna um status code 200 com a lista de tipos de usuários</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposUsuarioController.Put(System.Guid,eventplus_webapi.Domains.TiposUsuario)">
            <summary>
            Endpoint que acessa o método Atualizar do tipoUsuarioRepository
            </summary>
            <param name="id">ID do usuário que será atualizado</param>
            <param name="tipoUsuario">Objeto com os novos atributos a serem atualizados</param>
            <returns>Retorna um status code 200 - Ok</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposUsuarioController.Delete(System.Guid)">
            <summary>
            Endpoint que acessa o método Deletar do TipoUsuarioRepository
            </summary>
            <param name="id">ID do usuário que será deletado</param>
            <returns>Retorna um StatusCode 200 - Ok</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.TiposUsuarioController.GetById(System.Guid)">
            <summary>
            Endpoint que aciona o método BuscarPorId no TipoUsuarioRepository
            </summary>
            <param name="id">ID do usuário que será buscado</param>
            <returns>retorna um StatusCode Ok - 200 com o objeto encontrado</returns>
        </member>
        <member name="T:eventplus_webapi.Controllers.UsuarioController">
            <summary>
            Controlador responsável pelos Endpoints de usuário
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.UsuarioController.#ctor">
            <summary>
            Construtor para atribuir o objeto UsuarioRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Controllers.UsuarioController.GetById(System.Guid)">
            <summary>
            Endpoint para buscar um usuário pelo seu ID
            </summary>
            <param name="id">ID do usuário que será buscado</param>
            <returns>Retorna um StatusCode(200) - OK com o objeto encontrado</returns>
        </member>
        <member name="M:eventplus_webapi.Controllers.UsuarioController.Post(eventplus_webapi.Domains.Usuario)">
            <summary>
            Endpoint para cadastrar um novo usuário
            </summary>
            <param name="usuario">Objeto com os atributos que serão cadastrados</param>
            <returns>Retorna um Status Code 201 - Created</returns>
        </member>
        <member name="T:eventplus_webapi.Domains.ComentarioEvento">
            <summary>
            Domain que representa a entidade ComentarioEvento
            </summary>
        </member>
        <member name="T:eventplus_webapi.Domains.Evento">
            <summary>
            Domain que representa a entidade Evento
            </summary>
        </member>
        <member name="T:eventplus_webapi.Domains.Instituicao">
            <summary>
            Domain que representa a entidade Instituicao
            </summary>
        </member>
        <member name="T:eventplus_webapi.Domains.PresencasEvento">
            <summary>
            Domain que representa a entidade PresencasEvento
            </summary>
        </member>
        <member name="T:eventplus_webapi.Domains.TiposEvento">
            <summary>
            Domain que representa a entidade TiposEvento
            </summary>
        </member>
        <member name="T:eventplus_webapi.Domains.TiposUsuario">
            <summary>
            Domain que representa a entidade TiposUsuario
            </summary>
        </member>
        <member name="T:eventplus_webapi.Domains.Usuario">
            <summary>
            Domain que representa a entidade Usuario
            </summary>
        </member>
        <member name="T:eventplus_webapi.Interfaces.IComentarioEventoRepository">
            <summary>
            Interface que define os métodos da entidade ComentarioEvento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IComentarioEventoRepository.Cadastrar(eventplus_webapi.Domains.ComentarioEvento)">
            <summary>
            Método para cadastrar um novo comentário
            </summary>
            <param name="comentarioEvento">Objeto com os valores a serem cadastrados</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IComentarioEventoRepository.Listar(System.Guid)">
            <summary>
            Método para listar todos os comentários daquele evento
            </summary>
            <returns> Retorna a lista dos comentários</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IComentarioEventoRepository.Deletar(System.Guid)">
            <summary>
            Método para deletar um comentário existente
            </summary>
            <param name="id"> ID do comentário que será deletado </param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IComentarioEventoRepository.BuscarPorId(System.Guid)">
            <summary>
            Método para buscar um comentário por ID
            </summary>
            <param name="id">ID do comentário que será buscado</param>
            <returns>Retorna o objeto com o comentário buscado</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IComentarioEventoRepository.ListarPorUsuario(System.Guid,System.Guid)">
            <summary>
            Lista todos os comentários de um determindado usuário
            </summary>
            <param name="idUsuario">Id do usuário que terá os seus comentários listados</param>
            <returns>Uma lista com os comentários do usuário</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IComentarioEventoRepository.ListarTodos">
            <summary>
            Método para listar todos os comentários
            </summary>
            <returns>retorna uma lista com os objetos</returns>
        </member>
        <member name="T:eventplus_webapi.Interfaces.IEventoRepository">
            <summary>
            Interface que é responsável por definir os métodos da entidade Evento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IEventoRepository.Cadastrar(eventplus_webapi.Domains.Evento)">
            <summary>
            Método de cadastro de um novo evento
            </summary>
            <param name="evento">Objeto que terá os dados a serem adicionados</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IEventoRepository.Deletar(System.Guid)">
            <summary>
            Método que exclui um Evento Existente
            </summary>
            <param name="id">ID do evento que será deletado</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IEventoRepository.Listar">
            <summary>
            Método para listar todos os eventos
            </summary>
            <returns>Retorna a lista de todos os eventos</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IEventoRepository.ListarProximos">
            <summary>
            Método que lista todos os eventos a partir da data atual
            </summary>
            <returns>Retorna a lista dos próximos eventos</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IEventoRepository.BuscarPorId(System.Guid)">
            <summary>
            Método para buscar um evento pelo seu ID
            </summary>
            <param name="id">ID do evento que será buscado</param>
            <returns>retorna o evento buscado</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IEventoRepository.Atualizar(System.Guid,eventplus_webapi.Domains.Evento)">
            <summary>
            Método para atualizar um evento existente
            </summary>
            <param name="id">ID do evento que será atualizado</param>
            <param name="evento">Objeto com as novas informações a serem inseridas</param>
        </member>
        <member name="T:eventplus_webapi.Interfaces.IInstituicaoRepository">
            <summary>
            Interface responsável pelos métodos da entidade Instituição
            </summary>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IInstituicaoRepository.Cadastrar(eventplus_webapi.Domains.Instituicao)">
            <summary>
            Método para cadastrar uma nova instituição no sistema
            </summary>
            <param name="instituicao">Objeto com os valores a serem cadastrados</param>
        </member>
        <member name="T:eventplus_webapi.Interfaces.IPresencasEventoRepository">
            <summary>
            Interface que define os métodos da entidade PresencasEvento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IPresencasEventoRepository.Cadastrar(eventplus_webapi.Domains.PresencasEvento)">
            <summary>
            Método responsável por cadastrar uma nova Presença
            </summary>
            <param name="presencasEvento">Objeto com os atributos a serem cadastrados</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IPresencasEventoRepository.Listar">
            <summary>
            Método responsável por listar todas as presenças
            </summary>
            <returns>Retorna uma lista com todas as presenças</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IPresencasEventoRepository.Atualizar(System.Guid,eventplus_webapi.Domains.PresencasEvento)">
            <summary>
            Método responsável por atualizar uma presença
            </summary>
            <param name="id">ID da presença que será atualizada</param>
            <param name="presencasEvento">objeto com os novos valores a serem adicionados</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IPresencasEventoRepository.Deletar(System.Guid)">
            <summary>
            Método que é responsável por deletar
            </summary>
            <param name="id">ID da presença que será deletada</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IPresencasEventoRepository.ListarPresencasUser(System.Guid)">
            <summary>
            Método responsável por listar as presenças de um determinado usuário
            </summary>
            <param name="idUsuario">As presenças serão buscadas a partir do ID do usuário</param>
            <returns>Retorna a lista filtrada</returns>
        </member>
        <member name="T:eventplus_webapi.Interfaces.ITiposEventoRepository">
            <summary>
            Interface responsável por definir os métodos da entidade TiposEvento
            </summary>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposEventoRepository.Cadastrar(eventplus_webapi.Domains.TiposEvento)">
            <summary>
            Método responsável por cadastrar um novo tipo de evento
            </summary>
            <param name="tipoEvento">Objeto com os atributos que serão cadastrados</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposEventoRepository.Deletar(System.Guid)">
            <summary>
            Método responsável por deletar um tipo de evento
            </summary>
            <param name="id">ID do tipo de evento que será deletado</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposEventoRepository.Listar">
            <summary>
            Método responsável por listar todos os tipos de eventos
            </summary>
            <returns>Retorna a lista com todos os tipos de eventos</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposEventoRepository.BuscarPorId(System.Guid)">
            <summary>
            Método responsável por buscar um tipo de evento por seu ID
            </summary>
            <param name="id">ID do tipo de evento que será buscado</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposEventoRepository.Atualizar(System.Guid,eventplus_webapi.Domains.TiposEvento)">
            <summary>
            Método responsável por atualizar um tipo de evento existente
            </summary>
            <param name="id">ID do tipo de evento que será atualizado</param>
            <param name="tipoEvento">objeto com os novos dados para atualizar</param>
        </member>
        <member name="T:eventplus_webapi.Interfaces.ITiposUsuarioRepository">
            <summary>
            Interface responsável pelos métodos da entidade TiposUsuario
            </summary>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposUsuarioRepository.Cadastrar(eventplus_webapi.Domains.TiposUsuario)">
            <summary>
            Método responsável por cadastrar um novo tipo de usuário no sistema
            </summary>
            <param name="tipoUsuario">objeto com os atributos que serão atualizados</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposUsuarioRepository.Deletar(System.Guid)">
            <summary>
            Método responsável por deletar um tipo de usuário
            </summary>
            <param name="id">ID do tipo de usuário que será deletado</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposUsuarioRepository.Listar">
            <summary>
            Método responsável por listar todos os tipos de usuário
            </summary>
            <returns>retorna a lista com todos os tipos de usuário</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposUsuarioRepository.BuscarPorId(System.Guid)">
            <summary>
            Método responsável por buscar um tipo de usuário pelo seu ID
            </summary>
            <param name="id">ID do tipo do usuário que sera´buscado</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.ITiposUsuarioRepository.Atualizar(System.Guid,eventplus_webapi.Domains.TiposUsuario)">
            <summary>
            Método responsável por atualizar um tipo de usuário existente
            </summary>
            <param name="id">ID do tipo de usuário que será atualizado</param>
            <param name="tipoUsuario">objeto que contém os atributos que serão atualizados</param>
        </member>
        <member name="T:eventplus_webapi.Interfaces.IUsuarioRepository">
            <summary>
            Interface responsável por definir os métodos da entidade Usuario
            </summary>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IUsuarioRepository.Cadastrar(eventplus_webapi.Domains.Usuario)">
            <summary>
            Método responsável por cadastrar um novo usuário
            </summary>
            <param name="usuario">objeto com os novos atributos a serem cadastrados</param>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IUsuarioRepository.BuscarPorId(System.Guid)">
            <summary>
            Método responsável por buscar um usuário pelo seu ID
            </summary>
            <param name="id">ID do usuário que será buscado</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="M:eventplus_webapi.Interfaces.IUsuarioRepository.BuscarPorEmailESenha(System.String,System.String)">
            <summary>
            Método responsável por buscar um usuário pelo seu email e senha
            </summary>
            <param name="email">email que será fornecido pelo usuário</param>
            <param name="senha">senha que será fornecida pelo usuário</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="T:eventplus_webapi.Migrations.BD_v1">
            <inheritdoc />
        </member>
        <member name="M:eventplus_webapi.Migrations.BD_v1.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:eventplus_webapi.Migrations.BD_v1.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:eventplus_webapi.Migrations.BD_v1.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:eventplus_webapi.Migrations.eventplusDbNuvem">
            <inheritdoc />
        </member>
        <member name="M:eventplus_webapi.Migrations.eventplusDbNuvem.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:eventplus_webapi.Migrations.eventplusDbNuvem.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:eventplus_webapi.Migrations.eventplusDbNuvem.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:eventplus_webapi.Repositories.ComentarioEventoRepository">
            <summary>
            Repositório que define os métodos implementados na Interface IComentarioRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.ComentarioEventoRepository.#ctor">
            <summary>
            Construtor que instancia o objeto da context
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.ComentarioEventoRepository.Cadastrar(eventplus_webapi.Domains.ComentarioEvento)">
            <summary>
            Método para cadastrar um novo comentário
            </summary>
            <param name="comentarioEvento">Objeto com os valores a serem cadastrados</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.ComentarioEventoRepository.Listar(System.Guid)">
            <summary>
            Método para listar todos os comentários daquele evento
            </summary>
            <returns> Retorna a lista dos comentários</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.ComentarioEventoRepository.ListarPorUsuario(System.Guid,System.Guid)">
            <summary>
            Lista todos os comentários de um determindado usuário
            </summary>
            <param name="idUsuario">Id do usuário que terá os seus comentários listados</param>
            <returns>Uma lista com os comentários do usuário</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.ComentarioEventoRepository.ListarTodos">
            <summary>
            Método para listar todos os comentários
            </summary>
            <returns>retorna uma lista com os objetos</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.ComentarioEventoRepository.BuscarPorId(System.Guid)">
            <summary>
            Método para buscar um comentário por ID
            </summary>
            <param name="id">ID do comentário que será buscado</param>
            <returns>Retorna o objeto com o comentário buscado</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.ComentarioEventoRepository.Deletar(System.Guid)">
            <summary>
            Método para deletar um comentário existente
            </summary>
            <param name="id"> ID do comentário que será deletado </param>
        </member>
        <member name="T:eventplus_webapi.Repositories.EventoRepository">
            <summary>
            Repositório que define a lógica dos métodos implementados pela interface IEventoRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.EventoRepository.#ctor">
            <summary>
            Construtor responsável por instaciar o objeto _eventContext
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.EventoRepository.Cadastrar(eventplus_webapi.Domains.Evento)">
            <summary>
            Método de cadastro de um novo evento
            </summary>
            <param name="evento">Objeto que terá os dados a serem adicionados</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.EventoRepository.Listar">
            <summary>
            Método para listar todos os eventos
            </summary>
            <returns>Retorna a lista de todos os eventos</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.EventoRepository.ListarProximos">
            <summary>
            Método que lista todos os eventos a partir da data atual
            </summary>
            <returns>Retorna a lista dos próximos eventos</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.EventoRepository.Atualizar(System.Guid,eventplus_webapi.Domains.Evento)">
            <summary>
            Método para atualizar um evento existente
            </summary>
            <param name="id">ID do evento que será atualizado</param>
            <param name="evento">Objeto com as novas informações a serem inseridas</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.EventoRepository.Deletar(System.Guid)">
            <summary>
            Método que exclui um Evento Existente
            </summary>
            <param name="id">ID do evento que será deletado</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.EventoRepository.BuscarPorId(System.Guid)">
            <summary>
            Método para buscar um evento pelo seu ID
            </summary>
            <param name="id">ID do evento que será buscado</param>
            <returns>retorna o evento buscado</returns>
        </member>
        <member name="T:eventplus_webapi.Repositories.InstituicaoRepository">
            <summary>
            Repositório responsável por armazenar os métodos implementados pela Interface IInstituicaoRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.InstituicaoRepository.Cadastrar(eventplus_webapi.Domains.Instituicao)">
            <summary>
            Método para cadastrar uma nova instituição no sistema
            </summary>
            <param name="instituicao">Objeto com os valores a serem cadastrados</param>
        </member>
        <member name="T:eventplus_webapi.Repositories.PresencasEventoRepository">
            <summary>
            Repositório responsável por definir as lógicas dos métodos implementados pela Interface IPresencasEventoRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.PresencasEventoRepository.#ctor">
            <summary>
            Construtor responsável pela implementação do objeto da context
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.PresencasEventoRepository.Cadastrar(eventplus_webapi.Domains.PresencasEvento)">
            <summary>
            Método responsável por cadastrar uma nova Presença
            </summary>
            <param name="presencasEvento">Objeto com os atributos a serem cadastrados</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.PresencasEventoRepository.Listar">
            <summary>
            Método responsável por listar todas as presenças
            </summary>
            <returns>Retorna uma lista com todas as presenças</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.PresencasEventoRepository.ListarPresencasUser(System.Guid)">
            <summary>
            Método responsável por listar as presenças de um determinado usuário
            </summary>
            <param name="idUsuario">As presenças serão buscadas a partir do ID do usuário</param>
            <returns>Retorna a lista filtrada</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.PresencasEventoRepository.Atualizar(System.Guid,eventplus_webapi.Domains.PresencasEvento)">
            <summary>
            Método responsável por atualizar uma presença
            </summary>
            <param name="id">ID da presença que será atualizada</param>
            <param name="presencasEvento">objeto com os novos valores a serem adicionados</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.PresencasEventoRepository.Deletar(System.Guid)">
            <summary>
            Método que é responsável por deletar uma presença
            </summary>
            <param name="id">ID da presença que será deletada</param>
        </member>
        <member name="T:eventplus_webapi.Repositories.TiposEventoRepository">
            <summary>
            Repositório para armazenar os métodos implementados pela interface
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposEventoRepository.#ctor">
            <summary>
            Construtor para instanciar um novo objeto do contexto
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposEventoRepository.Cadastrar(eventplus_webapi.Domains.TiposEvento)">
            <summary>
            Método responsável por cadastrar um novo tipo de evento
            </summary>
            <param name="tipoEvento">Objeto com os atributos que serão cadastrados</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposEventoRepository.Listar">
            <summary>
            Método responsável por listar todos os tipos de eventos
            </summary>
            <returns>Retorna a lista com todos os tipos de eventos</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposEventoRepository.Atualizar(System.Guid,eventplus_webapi.Domains.TiposEvento)">
            <summary>
            Método responsável por atualizar um tipo de evento existente
            </summary>
            <param name="id">ID do tipo de evento que será atualizado</param>
            <param name="tipoEvento">objeto com os novos dados para atualizar</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposEventoRepository.Deletar(System.Guid)">
            <summary>
            Método responsável por deletar um tipo de evento
            </summary>
            <param name="id">ID do tipo de evento que será deletado</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposEventoRepository.BuscarPorId(System.Guid)">
            <summary>
            Método responsável por buscar um tipo de evento por seu ID
            </summary>
            <param name="id">ID do tipo de evento que será buscado</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="T:eventplus_webapi.Repositories.TiposUsuarioRepository">
            <summary>
            Repositório com os métodos implementados pela Interface
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposUsuarioRepository.#ctor">
            <summary>
            Construtor que instancia o objeto
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposUsuarioRepository.Cadastrar(eventplus_webapi.Domains.TiposUsuario)">
            <summary>
            Método responsável por cadastrar um novo tipo de usuário no sistema
            </summary>
            <param name="tipoUsuario">objeto com os atributos que serão atualizados</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposUsuarioRepository.Listar">
            <summary>
            Método responsável por listar todos os tipos de usuário
            </summary>
            <returns>retorna a lista com todos os tipos de usuário</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposUsuarioRepository.Atualizar(System.Guid,eventplus_webapi.Domains.TiposUsuario)">
            <summary>
            Método responsável por atualizar um tipo de usuário existente
            </summary>
            <param name="id">ID do tipo de usuário que será atualizado</param>
            <param name="tipoUsuario">objeto que contém os atributos que serão atualizados</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposUsuarioRepository.Deletar(System.Guid)">
            <summary>
            Método responsável por deletar um tipo de usuário
            </summary>
            <param name="id">ID do tipo de usuário que será deletado</param>
        </member>
        <member name="M:eventplus_webapi.Repositories.TiposUsuarioRepository.BuscarPorId(System.Guid)">
            <summary>
            Método responsável por buscar um tipo de usuário pelo seu ID
            </summary>
            <param name="id">ID do tipo do usuário que sera´buscado</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="T:eventplus_webapi.Repositories.UsuarioRepository">
            <summary>
            Repositório que define a ógica dos métodos implementados pela Interface IUsuarioRepository
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.UsuarioRepository.#ctor">
            <summary>
            Construtor que instancia o objeto
            </summary>
        </member>
        <member name="M:eventplus_webapi.Repositories.UsuarioRepository.BuscarPorEmailESenha(System.String,System.String)">
            <summary>
            Método responsável por buscar um usuário pelo seu email e senha
            </summary>
            <param name="email">email que será fornecido pelo usuário</param>
            <param name="senha">senha que será fornecida pelo usuário</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.UsuarioRepository.BuscarPorId(System.Guid)">
            <summary>
            Método responsável por buscar um usuário pelo seu ID
            </summary>
            <param name="id">ID do usuário que será buscado</param>
            <returns>retorna o objeto encontrado</returns>
        </member>
        <member name="M:eventplus_webapi.Repositories.UsuarioRepository.Cadastrar(eventplus_webapi.Domains.Usuario)">
            <summary>
            Método responsável por cadastrar um novo usuário
            </summary>
            <param name="usuario">objeto com os novos atributos a serem cadastrados</param>
        </member>
        <member name="T:eventplus_webapi.Utils.Criptografia">
            <summary>
            Classe estática responsável por criptografar as senhas usando o BCrypt
            </summary>
        </member>
        <member name="M:eventplus_webapi.Utils.Criptografia.GerarHash(System.String)">
            <summary>
            Método que transforma a senha em uma HASH
            </summary>
            <param name="senha">Senha que será transformada</param>
            <returns>retorna a HASH</returns>
        </member>
        <member name="M:eventplus_webapi.Utils.Criptografia.CompararHash(System.String,System.String)">
            <summary>
            Método responsável por comparar a hash passada pelo form com a hash ja cadastrada no banco
            </summary>
            <param name="senhaForm">Senha passada no formulário</param>
            <param name="senhaBanco">Senha cadastrada no banco</param>
            <returns>Retorna um true ou false dependendo se as senhas forem comparadas</returns>
        </member>
    </members>
</doc>
